//! \page test0109app Test 0109 Application
//!
//! <hr size="1"/>
//!
//! \verbatim
// 
//
//
//**********************************************************************
//        TEST0109
//**********************************************************************
                                                                      //
define    TESTREPORT  'TestReport'                                    //
define    TESTSLOT    TERM_SLOT                                       //
define    LINE        64                                              //
                                                                      //
                                                                      //
vmthread  MAIN                                                        //  void    MAIN(void)
{                                                                     //  {
  CALL(Test0109)                                                      //    Test0109()
}                                                                     //  }
                                                                      //
                                                                      //
subcall   Test0109                                                    //  void Test0109(void)
{                                                                     //  {
  DATA8   Flag                                                        //
                                                                      //
  // Set success as default                                           //
	MEMORY_WRITE(GUI_SLOT,4,0,1,0)                                      //    MEMORY_WRITE(GUI_SLOT,4,0,1,0)
                                                                      //
  CALL(TestOpen)                                                      //
                                                                      //
  CALL(TestWrite,' VM CP_LT8')                                        //
                                                                      //
  CP_LT8(1,2,Flag)                                                    //    
  CALL(TestResult8,'CP_LT8      1 <   2',Flag,1)                      //
  CP_LT8(2,2,Flag)                                                    //    
  CALL(TestResult8,'CP_LT8      2 <   2',Flag,0)                      //
  CP_LT8(3,2,Flag)                                                    //    
  CALL(TestResult8,'CP_LT8      3 <   2',Flag,0)                      //
  CP_LT8(-2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT8     -2 <   2',Flag,1)                      //
  CP_LT8(2,-2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT8      2 <  -2',Flag,0)                      //
  CP_LT8(-1,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_LT8     -1 <  -2',Flag,0)                      //
  CP_LT8(-2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_LT8     -2 <  -2',Flag,0)                      //
  CP_LT8(-3,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_LT8     -3 <  -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_LT16')                                       //
                                                                      //
  CP_LT16(1,2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT16     1 <   2',Flag,1)                      //
  CP_LT16(2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT16     2 <   2',Flag,0)                      //
  CP_LT16(3,2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT16     3 <   2',Flag,0)                      //
  CP_LT16(-2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_LT16    -2 <   2',Flag,1)                      //
  CP_LT16(2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_LT16     2 <  -2',Flag,0)                      //
  CP_LT16(-1,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_LT16    -1 <  -2',Flag,0)                      //
  CP_LT16(-2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_LT16    -2 <  -2',Flag,0)                      //
  CP_LT16(-3,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_LT16    -3 <  -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_LT32')                                       //
                                                                      //
  CP_LT32(1,2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT32     1 <   2',Flag,1)                      //
  CP_LT32(2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT32     2 <   2',Flag,0)                      //
  CP_LT32(3,2,Flag)                                                   //    
  CALL(TestResult8,'CP_LT32     3 <   2',Flag,0)                      //
  CP_LT32(-2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_LT32    -2 <   2',Flag,1)                      //
  CP_LT32(2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_LT32     2 <  -2',Flag,0)                      //
  CP_LT32(-1,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_LT32    -1 <  -2',Flag,0)                      //
  CP_LT32(-2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_LT32    -2 <  -2',Flag,0)                      //
  CP_LT32(-3,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_LT32    -3 <  -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_LTF')                                        //
                                                                      //
  CP_LTF(1.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_LTF      1 <   2',Flag,1)                      //
  CP_LTF(2.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_LTF      2 <   2',Flag,0)                      //
  CP_LTF(3.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_LTF      3 <   2',Flag,0)                      //
  CP_LTF(-2.0F,2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_LTF     -2 <   2',Flag,1)                      //
  CP_LTF(2.0F,-2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_LTF      2 <  -2',Flag,0)                      //
  CP_LTF(-1.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_LTF     -1 <  -2',Flag,0)                      //
  CP_LTF(-2.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_LTF     -2 <  -2',Flag,0)                      //
  CP_LTF(-3.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_LTF     -3 <  -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GT8')                                        //
                                                                      //
  CP_GT8(1,2,Flag)                                                    //    
  CALL(TestResult8,'CP_GT8      1 >   2',Flag,0)                      //
  CP_GT8(2,2,Flag)                                                    //    
  CALL(TestResult8,'CP_GT8      2 >   2',Flag,0)                      //
  CP_GT8(3,2,Flag)                                                    //    
  CALL(TestResult8,'CP_GT8      3 >   2',Flag,1)                      //
  CP_GT8(-2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT8     -2 >   2',Flag,0)                      //
  CP_GT8(2,-2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT8      2 >  -2',Flag,1)                      //
  CP_GT8(-1,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_GT8     -1 >  -2',Flag,1)                      //
  CP_GT8(-2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_GT8     -2 >  -2',Flag,0)                      //
  CP_GT8(-3,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_GT8     -3 >  -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GT16')                                       //
                                                                      //
  CP_GT16(1,2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT16     1 >   2',Flag,0)                      //
  CP_GT16(2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT16     2 >   2',Flag,0)                      //
  CP_GT16(3,2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT16     3 >   2',Flag,1)                      //
  CP_GT16(-2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_GT16    -2 >   2',Flag,0)                      //
  CP_GT16(2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_GT16     2 >  -2',Flag,1)                      //
  CP_GT16(-1,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_GT16    -1 >  -2',Flag,1)                      //
  CP_GT16(-2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_GT16    -2 >  -2',Flag,0)                      //
  CP_GT16(-3,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_GT16    -3 >  -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GT32')                                       //
                                                                      //
  CP_GT32(1,2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT32     1 >   2',Flag,0)                      //
  CP_GT32(2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT32     2 >   2',Flag,0)                      //
  CP_GT32(3,2,Flag)                                                   //    
  CALL(TestResult8,'CP_GT32     3 >   2',Flag,1)                      //
  CP_GT32(-2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_GT32    -2 >   2',Flag,0)                      //
  CP_GT32(2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_GT32     2 >  -2',Flag,1)                      //
  CP_GT32(-1,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_GT32    -1 >  -2',Flag,1)                      //
  CP_GT32(-2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_GT32    -2 >  -2',Flag,0)                      //
  CP_GT32(-3,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_GT32    -3 >  -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GTF')                                        //
                                                                      //
  CP_GTF(1.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_GTF      1 >   2',Flag,0)                      //
  CP_GTF(2.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_GTF      2 >   2',Flag,0)                      //
  CP_GTF(3.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_GTF      3 >   2',Flag,1)                      //
  CP_GTF(-2.0F,2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_GTF     -2 >   2',Flag,0)                      //
  CP_GTF(2.0F,-2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_GTF      2 >  -2',Flag,1)                      //
  CP_GTF(-1.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_GTF     -1 >  -2',Flag,1)                      //
  CP_GTF(-2.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_GTF     -2 >  -2',Flag,0)                      //
  CP_GTF(-3.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_GTF     -3 >  -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_EQ8')                                        //
                                                                      //
  CP_EQ8(1,2,Flag)                                                    //    
  CALL(TestResult8,'CP_EQ8      1 ==  2',Flag,0)                      //
  CP_EQ8(2,2,Flag)                                                    //    
  CALL(TestResult8,'CP_EQ8      2 ==  2',Flag,1)                      //
  CP_EQ8(3,2,Flag)                                                    //    
  CALL(TestResult8,'CP_EQ8      3 ==  2',Flag,0)                      //
  CP_EQ8(-2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ8     -2 ==  2',Flag,0)                      //
  CP_EQ8(2,-2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ8      2 == -2',Flag,0)                      //
  CP_EQ8(-1,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_EQ8     -1 == -2',Flag,0)                      //
  CP_EQ8(-2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_EQ8     -2 == -2',Flag,1)                      //
  CP_EQ8(-3,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_EQ8     -3 == -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_EQ16')                                       //
                                                                      //
  CP_EQ16(1,2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ16     1 ==  2',Flag,0)                      //
  CP_EQ16(2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ16     2 ==  2',Flag,1)                      //
  CP_EQ16(3,2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ16     3 ==  2',Flag,0)                      //
  CP_EQ16(-2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_EQ16    -2 ==  2',Flag,0)                      //
  CP_EQ16(2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_EQ16     2 == -2',Flag,0)                      //
  CP_EQ16(-1,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_EQ16    -1 == -2',Flag,0)                      //
  CP_EQ16(-2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_EQ16    -2 == -2',Flag,1)                      //
  CP_EQ16(-3,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_EQ16    -3 == -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_EQ32')                                       //
                                                                      //
  CP_EQ32(1,2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ32     1 ==  2',Flag,0)                      //
  CP_EQ32(2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ32     2 ==  2',Flag,1)                      //
  CP_EQ32(3,2,Flag)                                                   //    
  CALL(TestResult8,'CP_EQ32     3 ==  2',Flag,0)                      //
  CP_EQ32(-2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_EQ32    -2 ==  2',Flag,0)                      //
  CP_EQ32(2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_EQ32     2 == -2',Flag,0)                      //
  CP_EQ32(-1,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_EQ32    -1 == -2',Flag,0)                      //
  CP_EQ32(-2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_EQ32    -2 == -2',Flag,1)                      //
  CP_EQ32(-3,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_EQ32    -3 == -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_EQF')                                        //
                                                                      //
  CP_EQF(1.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_EQF      1 ==  2',Flag,0)                      //
  CP_EQF(2.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_EQF      2 ==  2',Flag,1)                      //
  CP_EQF(3.0F,2.0F,Flag)                                              //    
  CALL(TestResult8,'CP_EQF      3 ==  2',Flag,0)                      //
  CP_EQF(-2.0F,2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_EQF     -2 ==  2',Flag,0)                      //
  CP_EQF(2.0F,-2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_EQF      2 == -2',Flag,0)                      //
  CP_EQF(-1.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_EQF     -1 == -2',Flag,0)                      //
  CP_EQF(-2.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_EQF     -2 == -2',Flag,1)                      //
  CP_EQF(-3.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_EQF     -3 == -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_NEQ8')                                       //
                                                                      //
  CP_NEQ8(1,2,Flag)                                                   //    
  CALL(TestResult8,'CP_NEQ8     1 !=  2',Flag,1)                      //
  CP_NEQ8(2,2,Flag)                                                   //    
  CALL(TestResult8,'CP_NEQ8     2 !=  2',Flag,0)                      //
  CP_NEQ8(3,2,Flag)                                                   //    
  CALL(TestResult8,'CP_NEQ8     3 !=  2',Flag,1)                      //
  CP_NEQ8(-2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ8    -2 !=  2',Flag,1)                      //
  CP_NEQ8(2,-2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ8     2 != -2',Flag,1)                      //
  CP_NEQ8(-1,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_NEQ8    -1 != -2',Flag,1)                      //
  CP_NEQ8(-2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_NEQ8    -2 != -2',Flag,0)                      //
  CP_NEQ8(-3,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_NEQ8    -3 != -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_NEQ16')                                      //
                                                                      //
  CP_NEQ16(1,2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ16    1 !=  2',Flag,1)                      //
  CP_NEQ16(2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ16    2 !=  2',Flag,0)                      //
  CP_NEQ16(3,2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ16    3 !=  2',Flag,1)                      //
  CP_NEQ16(-2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_NEQ16   -2 !=  2',Flag,1)                      //
  CP_NEQ16(2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_NEQ16    2 != -2',Flag,1)                      //
  CP_NEQ16(-1,-2,Flag)                                                //    
  CALL(TestResult8,'CP_NEQ16   -1 != -2',Flag,1)                      //
  CP_NEQ16(-2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_NEQ16   -2 != -2',Flag,0)                      //
  CP_NEQ16(-3,-2,Flag)                                                //    
  CALL(TestResult8,'CP_NEQ16   -3 != -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_NEQ32')                                      //
                                                                      //
  CP_NEQ32(1,2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ32    1 !=  2',Flag,1)                      //
  CP_NEQ32(2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ32    2 !=  2',Flag,0)                      //
  CP_NEQ32(3,2,Flag)                                                  //    
  CALL(TestResult8,'CP_NEQ32    3 !=  2',Flag,1)                      //
  CP_NEQ32(-2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_NEQ32   -2 !=  2',Flag,1)                      //
  CP_NEQ32(2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_NEQ32    2 != -2',Flag,1)                      //
  CP_NEQ32(-1,-2,Flag)                                                //    
  CALL(TestResult8,'CP_NEQ32   -1 != -2',Flag,1)                      //
  CP_NEQ32(-2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_NEQ32   -2 != -2',Flag,0)                      //
  CP_NEQ32(-3,-2,Flag)                                                //    
  CALL(TestResult8,'CP_NEQ32   -3 != -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_NEQF')                                       //
                                                                      //
  CP_NEQF(1.0F,2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_NEQF     1 !=  2',Flag,1)                      //
  CP_NEQF(2.0F,2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_NEQF     2 !=  2',Flag,0)                      //
  CP_NEQF(3.0F,2.0F,Flag)                                             //    
  CALL(TestResult8,'CP_NEQF     3 !=  2',Flag,1)                      //
  CP_NEQF(-2.0F,2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_NEQF    -2 !=  2',Flag,1)                      //
  CP_NEQF(2.0F,-2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_NEQF     2 != -2',Flag,1)                      //
  CP_NEQF(-1.0F,-2.0F,Flag)                                           //    
  CALL(TestResult8,'CP_NEQF    -1 != -2',Flag,1)                      //
  CP_NEQF(-2.0F,-2.0F,Flag)                                           //    
  CALL(TestResult8,'CP_NEQF    -2 != -2',Flag,0)                      //
  CP_NEQF(-3.0F,-2.0F,Flag)                                           //    
  CALL(TestResult8,'CP_NEQF    -3 != -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_LTEQ8')                                      //
                                                                      //
  CP_LTEQ8(1,2,Flag)                                                  //    
  CALL(TestResult8,'CP_LTEQ8    1 <=  2',Flag,1)                      //
  CP_LTEQ8(2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_LTEQ8    2 <=  2',Flag,1)                      //
  CP_LTEQ8(3,2,Flag)                                                  //    
  CALL(TestResult8,'CP_LTEQ8    3 <=  2',Flag,0)                      //
  CP_LTEQ8(-2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ8   -2 <=  2',Flag,1)                      //
  CP_LTEQ8(2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ8    2 <= -2',Flag,0)                      //
  CP_LTEQ8(-1,-2,Flag)                                                //    
  CALL(TestResult8,'CP_LTEQ8   -1 <= -2',Flag,0)                      //
  CP_LTEQ8(-2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_LTEQ8   -2 <= -2',Flag,1)                      //
  CP_LTEQ8(-3,-2,Flag)                                                //    
  CALL(TestResult8,'CP_LTEQ8   -3 <= -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_LTEQ16')                                     //
                                                                      //
  CP_LTEQ16(1,2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ16   1 <=  2',Flag,1)                      //
  CP_LTEQ16(2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ16   2 <=  2',Flag,1)                      //
  CP_LTEQ16(3,2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ16   3 <=  2',Flag,0)                      //
  CP_LTEQ16(-2,2,Flag)                                                //    
  CALL(TestResult8,'CP_LTEQ16  -2 <=  2',Flag,1)                      //
  CP_LTEQ16(2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_LTEQ16   2 <= -2',Flag,0)                      //
  CP_LTEQ16(-1,-2,Flag)                                               //    
  CALL(TestResult8,'CP_LTEQ16  -1 <= -2',Flag,0)                      //
  CP_LTEQ16(-2,-2,Flag)                                               //    
  CALL(TestResult8,'CP_LTEQ16  -2 <= -2',Flag,1)                      //
  CP_LTEQ16(-3,-2,Flag)                                               //    
  CALL(TestResult8,'CP_LTEQ16  -3 <= -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_LTEQ32')                                     //
                                                                      //
  CP_LTEQ32(1,2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ32   1 <=  2',Flag,1)                      //
  CP_LTEQ32(2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ32   2 <=  2',Flag,1)                      //
  CP_LTEQ32(3,2,Flag)                                                 //    
  CALL(TestResult8,'CP_LTEQ32   3 <=  2',Flag,0)                      //
  CP_LTEQ32(-2,2,Flag)                                                //    
  CALL(TestResult8,'CP_LTEQ32  -2 <=  2',Flag,1)                      //
  CP_LTEQ32(2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_LTEQ32   2 <= -2',Flag,0)                      //
  CP_LTEQ32(-1,-2,Flag)                                               //    
  CALL(TestResult8,'CP_LTEQ32  -1 <= -2',Flag,0)                      //
  CP_LTEQ32(-2,-2,Flag)                                               //    
  CALL(TestResult8,'CP_LTEQ32  -2 <= -2',Flag,1)                      //
  CP_LTEQ32(-3,-2,Flag)                                               //    
  CALL(TestResult8,'CP_LTEQ32  -3 <= -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_LTEQF')                                      //
                                                                      //
  CP_LTEQF(1.0F,2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_LTEQF    1 <=  2',Flag,1)                      //
  CP_LTEQF(2.0F,2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_LTEQF    2 <=  2',Flag,1)                      //
  CP_LTEQF(3.0F,2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_LTEQF    3 <=  2',Flag,0)                      //
  CP_LTEQF(-2.0F,2.0F,Flag)                                           //    
  CALL(TestResult8,'CP_LTEQF   -2 <=  2',Flag,1)                      //
  CP_LTEQF(2.0F,-2.0F,Flag)                                           //    
  CALL(TestResult8,'CP_LTEQF    2 <= -2',Flag,0)                      //
  CP_LTEQF(-1.0F,-2.0F,Flag)                                          //    
  CALL(TestResult8,'CP_LTEQF   -1 <= -2',Flag,0)                      //
  CP_LTEQF(-2.0F,-2.0F,Flag)                                          //    
  CALL(TestResult8,'CP_LTEQF   -2 <= -2',Flag,1)                      //
  CP_LTEQF(-3.0F,-2.0F,Flag)                                          //    
  CALL(TestResult8,'CP_LTEQF   -3 <= -2',Flag,1)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GTEQ8')                                      //
                                                                      //
  CP_GTEQ8(1,2,Flag)                                                  //    
  CALL(TestResult8,'CP_GTEQ8    1 >=  2',Flag,0)                      //
  CP_GTEQ8(2,2,Flag)                                                  //    
  CALL(TestResult8,'CP_GTEQ8    2 >=  2',Flag,1)                      //
  CP_GTEQ8(3,2,Flag)                                                  //    
  CALL(TestResult8,'CP_GTEQ8    3 >=  2',Flag,1)                      //
  CP_GTEQ8(-2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ8   -2 >=  2',Flag,0)                      //
  CP_GTEQ8(2,-2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ8    2 >= -2',Flag,1)                      //
  CP_GTEQ8(-1,-2,Flag)                                                //    
  CALL(TestResult8,'CP_GTEQ8   -1 >= -2',Flag,1)                      //
  CP_GTEQ8(-2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_GTEQ8   -2 >= -2',Flag,1)                      //
  CP_GTEQ8(-3,-2,Flag)                                                //    
  CALL(TestResult8,'CP_GTEQ8   -3 >= -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GTEQ16')                                     //
                                                                      //
  CP_GTEQ16(1,2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ16   1 >=  2',Flag,0)                      //
  CP_GTEQ16(2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ16   2 >=  2',Flag,1)                      //
  CP_GTEQ16(3,2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ16   3 >=  2',Flag,1)                      //
  CP_GTEQ16(-2,2,Flag)                                                //    
  CALL(TestResult8,'CP_GTEQ16  -2 >=  2',Flag,0)                      //
  CP_GTEQ16(2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_GTEQ16   2 >= -2',Flag,1)                      //
  CP_GTEQ16(-1,-2,Flag)                                               //    
  CALL(TestResult8,'CP_GTEQ16  -1 >= -2',Flag,1)                      //
  CP_GTEQ16(-2,-2,Flag)                                               //    
  CALL(TestResult8,'CP_GTEQ16  -2 >= -2',Flag,1)                      //
  CP_GTEQ16(-3,-2,Flag)                                               //    
  CALL(TestResult8,'CP_GTEQ16  -3 >= -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GTEQ32')                                     //
                                                                      //
  CP_GTEQ32(1,2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ32   1 >=  2',Flag,0)                      //
  CP_GTEQ32(2,2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ32   2 >=  2',Flag,1)                      //
  CP_GTEQ32(3,2,Flag)                                                 //    
  CALL(TestResult8,'CP_GTEQ32   3 >=  2',Flag,1)                      //
  CP_GTEQ32(-2,2,Flag)                                                //    
  CALL(TestResult8,'CP_GTEQ32  -2 >=  2',Flag,0)                      //
  CP_GTEQ32(2,-2,Flag)                                                //    
  CALL(TestResult8,'CP_GTEQ32   2 >= -2',Flag,1)                      //
  CP_GTEQ32(-1,-2,Flag)                                               //    
  CALL(TestResult8,'CP_GTEQ32  -1 >= -2',Flag,1)                      //
  CP_GTEQ32(-2,-2,Flag)                                               //    
  CALL(TestResult8,'CP_GTEQ32  -2 >= -2',Flag,1)                      //
  CP_GTEQ32(-3,-2,Flag)                                               //    
  CALL(TestResult8,'CP_GTEQ32  -3 >= -2',Flag,0)                      //
                                                                      //
  CALL(TestWrite,' VM CP_GTEQF')                                      //
                                                                      //
  CP_GTEQF(1.0F,2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_GTEQF    1 >=  2',Flag,0)                      //
  CP_GTEQF(2.0F,2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_GTEQF    2 >=  2',Flag,1)                      //
  CP_GTEQF(3.0F,2.0F,Flag)                                            //    
  CALL(TestResult8,'CP_GTEQF    3 >=  2',Flag,1)                      //
  CP_GTEQF(-2.0F,2.0F,Flag)                                           //    
  CALL(TestResult8,'CP_GTEQF   -2 >=  2',Flag,0)                      //
  CP_GTEQF(2.0F,-2.0F,Flag)                                           //    
  CALL(TestResult8,'CP_GTEQF    2 >= -2',Flag,1)                      //
  CP_GTEQF(-1.0F,-2.0F,Flag)                                          //    
  CALL(TestResult8,'CP_GTEQF   -1 >= -2',Flag,1)                      //
  CP_GTEQF(-2.0F,-2.0F,Flag)                                          //    
  CALL(TestResult8,'CP_GTEQF   -2 >= -2',Flag,1)                      //
  CP_GTEQF(-3.0F,-2.0F,Flag)                                          //    
  CALL(TestResult8,'CP_GTEQF   -3 >= -2',Flag,0)                      //
                                                                      //
  CALL(TestClose)                                                     //
}                                                                     //  }
                                                                      //
                                                                      //
subcall   TestResult8                                                 //  void TestResult8(Text,IstWert,SollWert)
{                                                                     //  {
  IN_S    Text LINE                                                   //
  IN_8    IstWert                                                     //
  IN_8    SollWert                                                    //
                                                                      //
  DATAF   DataF                                                       //
  DATAS   String LINE                                                 //
  DATAS   Result LINE                                                 //
                                                                      //
  JR_NEQ8(IstWert,SollWert,Error)                                     //    if (IstWert == SollWert)
                                                                      //    {
  STRINGS(ADD,'  ',Text,String)                                       //      STRINGS(ADD,' ',Text,String)
  STRINGS(ADD,String,' = [',String)                                   //      STRINGS(ADD,String,' = [',String)
  MOVE8_F(IstWert,DataF)                                              //
  STRINGS(VALUE_TO_STRING,DataF,-11,0,Result)                         //
  STRINGS(ADD,String,Result,String)                                   //      STRINGS(ADD,String,Result,String)
  STRINGS(ADD,String,']',String)                                      //      STRINGS(ADD,String,']',String)
                                                                      //
  JR(EndError)                                                        //    }
                                                                      //    else
Error:                                                                //    {
                                                                      //
  STRINGS(ADD,'# ',Text,String)                                       //      STRINGS(ADD,' ',Text,String) 
  STRINGS(ADD,String,' = [',String)                                   //      STRINGS(ADD,String,' = [',String)
  MOVE8_F(IstWert,DataF)                                              //
  STRINGS(VALUE_TO_STRING,DataF,-11,0,Result)                         //
  STRINGS(ADD,String,Result,String)                                   //      STRINGS(ADD,String,Result,String)
  STRINGS(ADD,String,'] (',String)                                    //      STRINGS(ADD,String,'] (',String)
  MOVE8_F(SollWert,DataF)                                             //
  STRINGS(VALUE_TO_STRING,DataF,-11,0,Result)                         //
  STRINGS(ADD,String,Result,String)                                   //      STRINGS(ADD,String,Result,String)
  STRINGS(ADD,String,')',String)                                      //      STRINGS(ADD,String,')',String)
                                                                      //
  // Set failed                                                       //
	MEMORY_WRITE(GUI_SLOT,4,0,1,1)                                      //      MEMORY_WRITE(GUI_SLOT,4,0,1,1)
                                                                      //
EndError:                                                             //    }
                                                                      //
  CALL(TestWrite,String)                                              //    CALL(TestWrite,String)
}                                                                     //  }
                                                                      //  
                                                                      //  
subcall   TestCheck                                                   //  void TestCheck(Text,IstWert,SollWert)
{                                                                     //  {
  IN_S    Text LINE                                                   //
  IN_S    IstWert LINE                                                //
  IN_S    SollWert LINE                                               //
                                                                      //
  DATA8   Result                                                      //
  DATAS   String LINE                                                 //
                                                                      //
  STRINGS(COMPARE,IstWert,SollWert,Result)                            //    STRINGS(COMPARE,IstWert,SollWert,Result)
  JR_FALSE(Result,Error)                                              //    if (Result)
                                                                      //    {
  STRINGS(ADD,'  ',Text,String)                                       //      STRINGS(ADD,' ',Text,String)
  STRINGS(ADD,String,' = [',String)                                   //      STRINGS(ADD,String,' = [',String)
  STRINGS(ADD,String,IstWert,String)                                  //      STRINGS(ADD,String,IstWert,String)
  STRINGS(ADD,String,']',String)                                      //      STRINGS(ADD,String,']',String)
                                                                      //
  JR(EndError)                                                        //    }
                                                                      //    else
Error:                                                                //    {
                                                                      //
  STRINGS(ADD,'# ',Text,String)                                       //      STRINGS(ADD,' ',Text,String) 
  STRINGS(ADD,String,' = [',String)                                   //      STRINGS(ADD,String,' = [',String)
  STRINGS(ADD,String,IstWert,String)                                  //      STRINGS(ADD,String,IstWert,String)
  STRINGS(ADD,String,'] (',String)                                    //      STRINGS(ADD,String,'] (',String)
  STRINGS(ADD,String,SollWert,String)                                 //      STRINGS(ADD,String,SollWert,String)
  STRINGS(ADD,String,')',String)                                      //      STRINGS(ADD,String,')',String)
                                                                      //
  // Set failed                                                       //
	MEMORY_WRITE(GUI_SLOT,4,0,1,1)                                      //      MEMORY_WRITE(GUI_SLOT,4,0,1,1)
                                                                      //
EndError:                                                             //    }
                                                                      //
  CALL(TestWrite,String)                                              //    CALL(TestWrite,String)
}                                                                     //  }
                                                                      //
                                                                      //
DATA16    hFile                                                       //
                                                                      //
subcall   TestOpen                                                    //  void TestOpen(void)
{                                                                     //  {
  DATAS   TestReport FILENAMESIZE                                     //
                                                                      //
  STRINGS(ADD,TESTREPORT,EXT_TEXT,TestReport)                         //    STRINGS(ADD,TESTREPORT,EXT_TEXT,TestReport)
  FILE(OPEN_APPEND,TestReport,hFile)                                  //    FILE(OPEN_APPEND,TestReport,hFile)
}                                                                     //  }
                                                                      //
                                                                      //
subcall   TestWrite                                                   //  void TestWrite(Text)
{                                                                     //  {
  IN_S    Text LINE                                                   //
                                                                      //
  FILE(WRITE_TEXT,hFile,DEL_CRLF,Text)                                //    FILE(WRITE_TEXT,hFile,DEL_CRLF,Text)
}                                                                     //  }
                                                                      //
                                                                      //
subcall   TestClose                                                   //  void TestClose(void)
{                                                                     //  {
  FILE(CLOSE,hFile)                                                   //    FILE(CLOSE,hFile)
}                                                                     //  }
                                                                      //
                                                                      //
//! \endverbatim

